/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.odu.cs.cs350;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.ParseException;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;

import edu.odu.cs.cs350.Course;
import edu.odu.cs.cs350.SemesterFactory;
import edu.odu.cs.cs350.SemesterIterator;

/**
 *
 * @author skotei
 * @author ashahid
 * Program heading (output): % of registration, etc..
 *
 */


public class RunProjection {

	private static final String[] PROGRAM_HEADING =
		{
				"% of enrollment period has elapsed."
		};
	private static final int H_WIDTH = 15;
	
    public static void main(String[] args)
    	throws Exception
    {
    	//Take semesters within args[0] and create an object
    	//assumes semesters within args[0] exist in a directory
    	//this is a directory with multiple semesters
    	// Used to test length of args
    	/*int argsLength = args.length;
    	System.out.println("The length of the array is: " + argsLength);*/

    	// Argument for destination

		String[] semesterDir = args[0].split(",");
		String enrollmentData = args[1];
		String reportPath = args[2];


//    	File projectingSem = new File(enrollmentData);
//    	File histSem = new File(args[args.length - 2]);



    	//this is a list of the multiple semesters
//    	File[] multipleList = histSem.listFiles();
    	List<Snapshot> historicalSem = readSemesters(semesterDir);


    	//Create a path from args[2] (later)

    	// Generate SPR
    	// % of enrollment period


//    	String proFileString = projectingSem.toString();
		Semester proSem = new Semester(enrollmentData);

    		// ask TK if the snaps that exist within sems will always be ordered by date
    		// taking last snapshot of semester
    	Snapshot lastSnap = proSem.readCSVs().get(proSem.readCSVs().size()-1);

    		// calculation for numerator
    	long daysElapsed = ChronoUnit.DAYS.between(proSem.get_startPreRegistrationDate(),
    												lastSnap.getSnapDate()) + 1;

//    	int daysElapsed = Math.abs(lastSnap.getSnapDate().getDate() -
//    			proSem.get_startPreRegistrationDate().getDate());

    		// calculation for percentage of enrollment period
    	double enrollPercent = (daysElapsed / proSem.get_registrationDays());

    		// Print out the enrollment period heading
    	System.out.println(enrollPercent + "% of enrollment period has elapsed.");


    	//Create heading for courses
    	System.out.printf("%-7s%-11s%-10s%4s", "Course", "Enrollment", "Projected", "Cap");

    	// Standard output of enrollment, projections, capacity of each course

// this may be useful later on
//		call readCSVs function
//    	BufferedReader bufferedReader = null;
//    	File csvFile = new File(args[0]);
//    	List<String> allArgs = new ArrayList<>();
//
//    	try {
//    		bufferedReader = new bufferedReader(new FileReader(csvFile));
//    		String line = "";
//    		while ((line = bufferedReader.readLine()) != null)
//    		{
//    			readSemesters(bufferedReader);
//    			System.out.println(line);
//    		}
//    		readSemesters(bufferedReader);
//    	}
//    	catch (Exception q)
//    	{
//    		q.printStackTrace();
//    	}
//    	finally
//    	{
//    		try
//    		{
//    			bufferedReader.close();
//    		}
//    		catch (IOException q)
//    		{
//    			q.printStackTrace();
//    		}
//    	}
//
//    	if (args.length > 0)
//    	{
//    		for (String val : args)
//    		{
//    			allArgs.add(val);
//    		}
//       	}
//    	else
//    	{
//    		System.out.println("No command line " + "arguments found.");
//    	}

    // This is for the headers of the SPR (needs work)
    	//System.out.println(projectHeading(PROGRAM_HEADING));

    	//System.out.println(heading("Course", H_WIDTH, "Enrollment", H_WIDTH, "Projected", H_WIDTH, "Cap"));
    	//System.out.println();

    }



    /**
     * Will contain instantiation of remaining objects for file and csv parsing
     * creating an empty collection<Semester>
     * creating an iterator<Semester>
     * loop through semester directories and find directories with VALID DATES
     * 	while iterator.hasNext() (has a dates file to read) -> create a semester with temporary name
     * 	++iterator (AKA-it.next)
     *
     * Go to semesterIterator.java
     * @throws IOException
     * @throws ParseException
     *
     */
    private static List<Snapshot> readSemesters(String[] semesters)
    		throws ParseException, IOException, Exception
    {
    	//List of all semesters
    	List<Snapshot> allSnaps = new ArrayList<Snapshot>();
    	//Reading CSVs of the semesters given (deal with multiple semesters?)
    	for (String semester : semesters)
    	{

    		Semester readSem = new Semester(semester);

    		allSnaps.addAll(readSem.readCSVs());
    	}
    	return allSnaps;

    	//How do I read multiple semesters?
    	//How will those semesters be given in args[0]?

//	If reading historical files from .txt, this is useful
//    	Iterator<Semester> itr = new SemesterIterator(buffer);
//
//    	while (itr.hasNext())
//    	{
//    		Semester sem = itr.next();
//    		if (sem != null)
//    		{
//    			collection.add(sem);
//    		}
//    	}
    }

//	computeProjections(container<Semester>)
    private static void computeProjections(List<Semester> historical, List<Semester> projecting)
    {
    	//return null;
    }

    //computeProjections(container<Semester>)
    /*
     * Pseudocode
     *
     * normalize dates
     * solve for enrollment data for the current semester using historical data, and current and
     * historical data on the last day of current semester
     *
     * apply interpolation h(d)=h(da)+(dd/adbda)(h(db)h(da))
     * apply curve smoothing c(1)h(1)=r
     *
     */

    //Additional data/functions for output (TBD)
}
